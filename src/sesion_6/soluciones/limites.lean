/-
Copyright (c) 2023 Mar√≠a In√©s de Frutos-Fern√°ndez. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author : Mar√≠a In√©s de Frutos-Fern√°ndez
-/

import sesion_4.soluciones.limites

import topology.instances.real

/-
# L√≠mites de secuencias en Lean

Ahora que sabemos c√≥mo utilizar filtros en Lean, podemos reescribir
las soluciones de los ejercicios de l√≠mites de la sesi√≥n 4.

-/

open filter

open_locale topology -- para acceder a la notaci√≥n ùìù 

namespace limites

-- Nuestra definici√≥n `tends_to` es equivalente a `filter.tendsto`
lemma tends_to_iff_tendsto (a : ‚Ñï ‚Üí ‚Ñù) (l : ‚Ñù) :
  tends_to a l ‚Üî tendsto a at_top (ùìù l) :=
begin
  rw metric.tendsto_at_top,
  rw tends_to,
  congr',
end

/-- El l√≠mite de la secuencia constante con valor `c` es `c`. -/
theorem tends_to_const (c : ‚Ñù) : tends_to (Œª n, c) c :=
begin
  rw tends_to_iff_tendsto,
  exact tendsto_const_nhds,
end

/-- Si `a(n)` tiende a `L` entonces `a(n) + c` tiende a `t + c` -/
theorem tends_to_add_const {a : ‚Ñï ‚Üí ‚Ñù} {L : ‚Ñù} (c : ‚Ñù)
  (h : tends_to a L) :
  tends_to (Œª n, a n + c) (L + c) :=
begin
  rw tends_to_iff_tendsto at *,
  exact tendsto.add_const c h,
end

/-- Si `a(n)` tiende a `L`, entonces `-a(n)` tiende a `-L`.
Si simplificar la expresi√≥n dentro del valor absoluto te est√°
dando problemas, ve a la hoja `reales.lean`.
-/
theorem tends_to_neg {a : ‚Ñï ‚Üí ‚Ñù} {L : ‚Ñù} (ha : tends_to a L) :
  tends_to (Œª n, - a n) (-L) :=
begin
  rw tends_to_iff_tendsto at *,
  exact tendsto.neg ha,
end

/-- Si `a(n)` tiende a `La` y `b(n)` tiende a `Lb` entonces `a(n) + b(n)` 
  tiende a `La + Lb`. -/
theorem tends_to_add {a b : ‚Ñï ‚Üí ‚Ñù} {La Lb : ‚Ñù}
  (ha : tends_to a La) (hb : tends_to b Lb) :
  tends_to (Œª n, a n + b n) (La + Lb) :=
begin
  rw tends_to_iff_tendsto at *,
  exact tendsto.add ha hb,
end


/-- Si `a(n)` tiende a `La` y `b(n)` tiende a `Lb` entonces `a(n) - b(n)`
tiende a `La - Lb`. -/
theorem tends_to_sub {a b : ‚Ñï ‚Üí ‚Ñù} {La Lb : ‚Ñù}
  (ha : tends_to a La) (hb : tends_to b Lb) :
  tends_to (Œª n, a n - b n) (La - Lb) :=
begin
  rw tends_to_iff_tendsto at *,
  exact tendsto.sub ha hb,
end

/-- Si `a(n)` tiende a `L`, entonces `c*a(n)` tiende a `c*L`.
Pista: tratad el caso `c = 0` por separado, utilizando `by_cases hc : c = 0`.
-/
lemma tends_to_mul_const_left {a : ‚Ñï ‚Üí ‚Ñù} {L c : ‚Ñù} (h : tends_to a L) :
  tends_to (Œª n, c * (a n)) (c * L) := 
begin
  rw tends_to_iff_tendsto at *,
  exact tendsto.const_mul c h,
end

/- Lema del sandwich. -/
theorem sandwich (a b c : ‚Ñï ‚Üí ‚Ñù) (L : ‚Ñù) (ha : tends_to a L) (hc : tends_to c L) 
  (hab : ‚àÄ n, a n ‚â§ b n) (hbc : ‚àÄ n, b n ‚â§ c n) : 
  tends_to b L :=
begin
  rw tends_to_iff_tendsto at *,
  exact tendsto_of_tendsto_of_tendsto_of_le_of_le ha hc hab hbc, 
  -- Buscando `sandwich` o `squeeze` en la documentaci√≥n de mathlib, aparece este lema.
end

/-- Si `a(n)` tiende a `La` y `b(n)` tiende a `Lb` entonces `a(n) * b(n)` 
  tiende a `La * Lb`. -/
theorem tends_to_mul {a b : ‚Ñï ‚Üí ‚Ñù} {La Lb : ‚Ñù}
  (ha : tends_to a La) (hb : tends_to b Lb) :
  tends_to (Œª n, a n * b n) (La * Lb) :=
begin
  rw tends_to_iff_tendsto at *,
  exact tendsto.mul ha hb,
end

end limites